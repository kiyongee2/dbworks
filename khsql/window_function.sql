-- 윈도우 함수
-- 누적값 계산하기
CREATE TABLE TORDER (
	ORDER_DATE	DATE,
	ORDER_CNT	NUMBER
);

INSERT INTO TORDER VALUES('20210801',10);
INSERT INTO TORDER VALUES('2021-08-02',12);
INSERT INTO TORDER VALUES('20210803',6);
INSERT INTO TORDER VALUES('20210804',8);
INSERT INTO TORDER VALUES('20210805',10);

SELECT * FROM TORDER;

-- 누적값 - 오름차순
SELECT ORDER_DATE,
       ORDER_CNT,
       SUM(ORDER_CNT) OVER(ORDER BY ORDER_DATE) AS SUM
    FROM TORDER;
  
-- 누적값(WINDOWING 함수) - 오름차순  
SELECT ORDER_DATE,
       ORDER_CNT,
       SUM(ORDER_CNT) OVER(ORDER BY ORDER_DATE 
                ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SUM
    FROM TORDER;

-- 누적값(WINDOWING 함수) - 내림차순
SELECT ORDER_DATE,
       ORDER_CNT,
       SUM(ORDER_CNT) OVER(ORDER BY ORDER_DATE 
                ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS SUM
    FROM TORDER;

-- 누적값 계산하기2
CREATE TABLE EMPLOYEES (
	DEPARTMENT_ID	VARCHAR(2),
	NAME			VARCHAR(15),
	HIRE_DATE		DATE,
	SALARY			NUMBER
);

INSERT INTO EMPLOYEES VALUES('10','Jennifer',TO_DATE('2013/09/17'),4400);
INSERT INTO EMPLOYEES VALUES('10','Pat',TO_DATE('2015/08/17'),6000);
INSERT INTO EMPLOYEES VALUES('10','Alexander',TO_DATE('2016/01/03'),3100);
INSERT INTO EMPLOYEES VALUES('10','Guy',TO_DATE('2016/11/15'),2600);
INSERT INTO EMPLOYEES VALUES('20','Michael',TO_DATE('2014/02/17'),13000);
INSERT INTO EMPLOYEES VALUES('20','Kevin',TO_DATE('2016/01/24'),6000);
INSERT INTO EMPLOYEES VALUES('20','Tayler',TO_DATE('2017/05/24'),9600);
INSERT INTO EMPLOYEES VALUES('20','Kimberely',TO_DATE('2017/11/16'),3100);
INSERT INTO EMPLOYEES VALUES('30','Den',TO_DATE('2012/12/07'),11000);
INSERT INTO EMPLOYEES VALUES('30','Shelli',TO_DATE('2015/07/24'),2900);
INSERT INTO EMPLOYEES VALUES('30','Sigal',TO_DATE('2015/12/24'),2800);

SELECT * FROM EMPLOYEES;

-- 급여 누적 계산
SELECT DEPARTMENT_ID,
        NAME,
        HIRE_DATE,
        SALARY,
        SUM(SALARY) OVER(ORDER BY NAME) AS SUM_SAL
    FROM EMPLOYEES;

-- 부서별 누적 급여 구하기(PARTITON BY 구문 사용)
SELECT DEPARTMENT_ID,
        NAME,
        HIRE_DATE,
        SALARY,
        SUM(SALARY) OVER(PARTITION BY DEPARTMENT_ID ORDER BY HIRE_DATE) AS SUM_SAL
    FROM EMPLOYEES;
    
SELECT DEPARTMENT_ID,
        NAME,
        HIRE_DATE,
        SALARY,
        SUM(SALARY) OVER(PARTITION BY DEPARTMENT_ID ORDER BY HIRE_DATE
              ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SUM_SAL
    FROM EMPLOYEES;
   
SELECT DEPARTMENT_ID,
        NAME,
        HIRE_DATE,
        SALARY,
        SUM(SALARY) OVER(PARTITION BY DEPARTMENT_ID ORDER BY HIRE_DATE
            ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS SUM_SAL
    FROM EMPLOYEES;

DROP TABLE EMPLOYEES;
-- 행 순서 관련 함수 - LEAD(), LAG()
CREATE TABLE EMP_INFO (
	EMP_NO		VARCHAR(3),
	NAME		VARCHAR(20),
	SAL			NUMBER
);

INSERT INTO EMP_INFO VALUES('100','Steven',24000);
INSERT INTO EMP_INFO VALUES('101','Neena',17000);
INSERT INTO EMP_INFO VALUES('102','Lex',17000);
INSERT INTO EMP_INFO VALUES('108','Nancy',12000);
INSERT INTO EMP_INFO VALUES('109','Daniel',9000);
INSERT INTO EMP_INFO VALUES('110','John',8200);
INSERT INTO EMP_INFO VALUES('111','Ismael',7800);
INSERT INTO EMP_INFO VALUES('112','Jose Manuel',7700);
INSERT INTO EMP_INFO VALUES('113','Luis',6900);
INSERT INTO EMP_INFO VALUES('119','Karen',2500);

COMMIT;

SELECT * FROM EMP_INFO;

-- LEAD(칼럼명, 수) : 수만큼 위로 끌고 올라옴
-- LEAD(칼럼명, 수, 0) : NULL인 경우 0으로 지정함
SELECT EMP_NO, NAME, SAL,
       LEAD(SAL, 3) OVER(ORDER BY SAL DESC) AS SAL2,
       LEAD(SAL, 3, 0) OVER(ORDER BY SAL DESC) AS SAL3
    FROM EMP_INFO;

-- LAG(칼럼명, 수) : 수만큼 아래로 내려감
-- LAG(칼럼명, 수, 0) : NULL인 경우 0으로 지정함
SELECT EMP_NO, NAME, SAL,
       LAG(SAL, 3) OVER(ORDER BY SAL DESC) AS SAL2,
       LAG(SAL, 3, 0) OVER(ORDER BY SAL DESC) AS SAL3
    FROM EMP_INFO;
    
--분석함수 - NTILE 함수
CREATE TABLE exam_score (
	이름		VARCHAR(20),
	국어		NUMBER,
	영어		NUMBER,
	수학		NUMBER
);

INSERT INTO EXAM_SCORE VALUES ('고하나', 116, 77, 75);
INSERT INTO EXAM_SCORE VALUES ('이하나', 101, 69, 80);
INSERT INTO EXAM_SCORE VALUES ('박하나', 118, 62, 60);
INSERT INTO EXAM_SCORE VALUES ('정하나', 96, 72, 70);
INSERT INTO EXAM_SCORE VALUES ('최하나', 103, 77, 55);
INSERT INTO EXAM_SCORE VALUES ('김하나', 78, 66, 61);
INSERT INTO EXAM_SCORE VALUES ('한하나', 85, 72, 75);
INSERT INTO EXAM_SCORE VALUES ('장하나', 99, 70, 53);
INSERT INTO EXAM_SCORE VALUES ('윤하나', 105, 75, 69);
INSERT INTO EXAM_SCORE VALUES ('임하나', 117, 68, 73);

SELECT * FROM exam_score;

-- 과목별 등급 검색
SELECT 이름,
       NTILE(8) OVER(ORDER BY 국어 DESC) 국어등급,
       국어
  FROM exam_score;

-- '최하나'가 없는 9명인 경우
SELECT 이름,
       NTILE(8) OVER(ORDER BY 국어 DESC) 국어등급,
       국어
  FROM exam_score
 WHERE 이름 <> '최하나';
 
-- 전체 과목(언어영역 120, 영어, 수학 - 80)
SELECT 이름,
       NTILE(8) OVER(ORDER BY 국어 DESC) 국어등급,
       국어,
       NTILE(8) OVER(ORDER BY 영어 DESC) 영어등급,
       영어,
       NTILE(8) OVER(ORDER BY 수학 DESC) 수학등급,
       수학
  FROM exam_score;

DROP TABLE exam_score;
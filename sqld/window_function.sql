-- WINDOW 함수
CREATE TABLE EMPLOYEES (
	DEPARTMENT_ID	VARCHAR(2),
	NAME			VARCHAR(15),
	HIRE_DATE		DATE,
	SALARY			NUMBER
);

INSERT INTO EMPLOYEES VALUES('10','Jennifer',TO_DATE('20130917','YYYYMMDD'),4400);
INSERT INTO EMPLOYEES VALUES('10','Pat',TO_DATE('20150817','YYYYMMDD'),6000);
INSERT INTO EMPLOYEES VALUES('10','Alexander',TO_DATE('20160103','YYYYMMDD'),3100);
INSERT INTO EMPLOYEES VALUES('10','Guy',TO_DATE('20161115','YYYYMMDD'),2600);
INSERT INTO EMPLOYEES VALUES('20','Michael',TO_DATE('20140217','YYYYMMDD'),13000);
INSERT INTO EMPLOYEES VALUES('20','Kevin',TO_DATE('20160124','YYYYMMDD'),6000);
INSERT INTO EMPLOYEES VALUES('20','Tayler',TO_DATE('20170524','YYYYMMDD'),9600);
INSERT INTO EMPLOYEES VALUES('20','Kimberely',TO_DATE('20171116','YYYYMMDD'),3100);
INSERT INTO EMPLOYEES VALUES('30','Den',TO_DATE('20121207','YYYYMMDD'),11000);
INSERT INTO EMPLOYEES VALUES('30','Shelli',TO_DATE('20150724','YYYYMMDD'),2900);
INSERT INTO EMPLOYEES VALUES('30','Sigal',TO_DATE('20151224','YYYYMMDD'),2800);

SELECT * FROM EMPLOYEES;

-- 누적치 구하기
SELECT DEPARTMENT_ID,
        NAME,
        SALARY,
        HIRE_DATE,
        MIN(SALARY) OVER(PARTITION BY DEPARTMENT_ID ORDER BY HIRE_DATE) AS MIN_SAL
        -- RANGE UNBOUNDED PRECEDING 숨겨 있음(파티션 위부터 현재 행까지 누적범위)
    FROM EMPLOYEES;
   
-- ORDER BY HIRE_DATE 생략
SELECT DEPARTMENT_ID,
        NAME,
        SALARY,
        HIRE_DATE,
        MIN(SALARY) OVER(PARTITION BY DEPARTMENT_ID) AS MIN_SAL
        -- RANGE UNBOUNDED PRECEDING 숨겨 있음(파티션 위부터 현재 행까지 누적범위)
    FROM EMPLOYEES;

-- 분석 함수 : 윈도우 함수
CREATE TABLE TORDER (
	ORDER_DATE	DATE,
	ORDER_CNT	NUMBER
);

INSERT INTO TORDER VALUES('20210801',10);
INSERT INTO TORDER VALUES('20210802',12);
INSERT INTO TORDER VALUES('20210803',6);
INSERT INTO TORDER VALUES('20210804',8);
INSERT INTO TORDER VALUES('20210805',10);

SELECT * FROM TORDER;

SELECT ORDER_DATE,
       ORDER_CNT,
       SUM(ORDER_CNT) OVER(ORDER BY ORDER_DATE) AS SUM
    FROM TORDER;
    
SELECT ORDER_DATE,
       ORDER_CNT,
       SUM(ORDER_CNT) OVER(ORDER BY ORDER_DATE 
                ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SUM
    FROM TORDER;

SELECT ORDER_DATE,
       ORDER_CNT,
       SUM(ORDER_CNT) OVER(ORDER BY ORDER_DATE 
                ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS SUM
    FROM TORDER;
    
--분석함수 - NTILE 함수
CREATE TABLE EXAM_SCORE (
	이름		VARCHAR(20),
	국어		NUMBER,
	영어		NUMBER,
	수학		NUMBER
);

INSERT INTO EXAM_SCORE VALUES ('김수현', 116, 77, 75);
INSERT INTO EXAM_SCORE VALUES ('박보검', 101, 69, 80);
INSERT INTO EXAM_SCORE VALUES ('아이유', 118, 62, 60);
INSERT INTO EXAM_SCORE VALUES ('김하늘', 96, 72, 70);
INSERT INTO EXAM_SCORE VALUES ('이효리', 103, 77, 55);
INSERT INTO EXAM_SCORE VALUES ('유재석', 78, 66, 61);
INSERT INTO EXAM_SCORE VALUES ('신동엽', 85, 72, 75);
INSERT INTO EXAM_SCORE VALUES ('서장훈', 99, 70, 53);
INSERT INTO EXAM_SCORE VALUES ('한혜진', 105, 75, 69);
INSERT INTO EXAM_SCORE VALUES ('김동률', 117, 68, 73);

SELECT * FROM exam_score;

-- 과목별 등급 검색
SELECT 이름,
       NTILE(8) OVER(ORDER BY 국어 DESC) 국어등급,
       국어
  FROM exam_score;

-- '아이유'가 없는 9명인 경우
SELECT 이름,
       NTILE(8) OVER(ORDER BY 국어 DESC) 국어등급,
       국어
  FROM exam_score
 WHERE 이름 <> '아이유';
 
-- 전체 과목(언어영역 120, 영어, 수학 - 80)
SELECT 이름,
       NTILE(8) OVER(ORDER BY 국어 DESC) 국어등급,
       국어,
       NTILE(8) OVER(ORDER BY 영어 DESC) 영어등급,
       영어,
       NTILE(8) OVER(ORDER BY 수학 DESC) 수학등급,
       수학
  FROM exam_score;

-- ROWNUM 사용




